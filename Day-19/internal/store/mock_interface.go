// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	models "Day-19/internal/models"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockProductStorer is a mock of ProductStorer interface.
type MockProductStorer struct {
	ctrl     *gomock.Controller
	recorder *MockProductStorerMockRecorder
}

// MockProductStorerMockRecorder is the mock recorder for MockProductStorer.
type MockProductStorerMockRecorder struct {
	mock *MockProductStorer
}

// NewMockProductStorer creates a new mock instance.
func NewMockProductStorer(ctrl *gomock.Controller) *MockProductStorer {
	mock := &MockProductStorer{ctrl: ctrl}
	mock.recorder = &MockProductStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductStorer) EXPECT() *MockProductStorerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductStorer) Create(ctx *gofr.Context, prod *models.Product) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, prod)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductStorerMockRecorder) Create(ctx, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductStorer)(nil).Create), ctx, prod)
}

// Del mocks base method.
func (m *MockProductStorer) Del(ctx *gofr.Context, id int) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del.
func (mr *MockProductStorerMockRecorder) Del(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockProductStorer)(nil).Del), ctx, id)
}

// Get mocks base method.
func (m *MockProductStorer) Get(ctx *gofr.Context, id int, brand string) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, brand)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductStorerMockRecorder) Get(ctx, id, brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductStorer)(nil).Get), ctx, id, brand)
}

// GetAll mocks base method.
func (m *MockProductStorer) GetAll(ctx *gofr.Context, brand string) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, brand)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductStorerMockRecorder) GetAll(ctx, brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductStorer)(nil).GetAll), ctx, brand)
}

// GetByName mocks base method.
func (m *MockProductStorer) GetByName(ctx *gofr.Context, name, brand string) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name, brand)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockProductStorerMockRecorder) GetByName(ctx, name, brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockProductStorer)(nil).GetByName), ctx, name, brand)
}

// Update mocks base method.
func (m *MockProductStorer) Update(ctx *gofr.Context, id int, prod *models.Product) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, prod)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductStorerMockRecorder) Update(ctx, id, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductStorer)(nil).Update), ctx, id, prod)
}

// MockBrandStorer is a mock of BrandStorer interface.
type MockBrandStorer struct {
	ctrl     *gomock.Controller
	recorder *MockBrandStorerMockRecorder
}

// MockBrandStorerMockRecorder is the mock recorder for MockBrandStorer.
type MockBrandStorerMockRecorder struct {
	mock *MockBrandStorer
}

// NewMockBrandStorer creates a new mock instance.
func NewMockBrandStorer(ctrl *gomock.Controller) *MockBrandStorer {
	mock := &MockBrandStorer{ctrl: ctrl}
	mock.recorder = &MockBrandStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandStorer) EXPECT() *MockBrandStorerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBrandStorer) Create(ctx *gofr.Context, brand models.Brand) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, brand)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBrandStorerMockRecorder) Create(ctx, brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBrandStorer)(nil).Create), ctx, brand)
}

// Get mocks base method.
func (m *MockBrandStorer) Get(ctx *gofr.Context, id int) (models.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(models.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBrandStorerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBrandStorer)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockBrandStorer) Update(ctx *gofr.Context, id int, brand models.Brand) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, brand)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBrandStorerMockRecorder) Update(ctx, id, brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBrandStorer)(nil).Update), ctx, id, brand)
}
