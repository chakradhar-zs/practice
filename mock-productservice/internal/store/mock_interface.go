// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	models "mock-productservice/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductStorer is a mock of ProductStorer interface.
type MockProductStorer struct {
	ctrl     *gomock.Controller
	recorder *MockProductStorerMockRecorder
}

// MockProductStorerMockRecorder is the mock recorder for MockProductStorer.
type MockProductStorerMockRecorder struct {
	mock *MockProductStorer
}

// NewMockProductStorer creates a new mock instance.
func NewMockProductStorer(ctrl *gomock.Controller) *MockProductStorer {
	mock := &MockProductStorer{ctrl: ctrl}
	mock.recorder = &MockProductStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductStorer) EXPECT() *MockProductStorerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockProductStorer) Create(m *models.Product) (*models.Product, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", m)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductStorerMockRecorder) Create(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductStorer)(nil).Create), m)
}
