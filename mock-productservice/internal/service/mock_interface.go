// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrandService is a mock of BrandService interface.
type MockBrandService struct {
	ctrl     *gomock.Controller
	recorder *MockBrandServiceMockRecorder
}

// MockBrandServiceMockRecorder is the mock recorder for MockBrandService.
type MockBrandServiceMockRecorder struct {
	mock *MockBrandService
}

// NewMockBrandService creates a new mock instance.
func NewMockBrandService(ctrl *gomock.Controller) *MockBrandService {
	mock := &MockBrandService{ctrl: ctrl}
	mock.recorder = &MockBrandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandService) EXPECT() *MockBrandServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBrandService) Create(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBrandServiceMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBrandService)(nil).Create), name)
}

// Get mocks base method.
func (m *MockBrandService) Get(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBrandServiceMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBrandService)(nil).Get), name)
}
